rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && request.auth.uid != null;
    }
    
    function isParticipant(participants) {
      return request.auth.uid in participants;
    }

    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow read: if isAuthenticated(); // Allow reading other users' basic info for friends/chat
    }

    // Chat rooms - participants can read/write
    match /chatRooms/{roomId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants || 
         request.auth.uid in request.resource.data.participants);
      
      // Chat messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && 
          (request.auth.uid == resource.data.senderId || 
           request.auth.uid == resource.data.recipientId ||
           request.auth.uid == request.resource.data.senderId || 
           request.auth.uid == request.resource.data.recipientId);
      }
    }

    // Friends collection - users can manage their own friendships
    match /friends/{friendshipId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }

    // Friend requests - users can read requests to/from them
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.fromUserId;
      
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.toUserId || 
         request.auth.uid == resource.data.fromUserId);
    }

    // User sessions - users can manage their own sessions
    match /userSessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId ||
        request.auth.uid == request.resource.data.userId;
    }

    // User interactions - users can create their own interactions
    match /userInteractions/{interactionId} {
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // Chat session analytics - users can manage their own chat sessions
    match /chatSessionAnalytics/{sessionId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId ||
         request.auth.uid == request.resource.data.userId);
    }

    // Feature usage - users can create their own feature usage logs
    match /featureUsage/{usageId} {
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // User behavior metrics - users can read/write their own metrics
    match /userBehaviorMetrics/{metricsId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId ||
        request.auth.uid == request.resource.data.userId;
    }

    // Admin collections (restricted)
    match /admin/{document=**} {
      allow read, write: if false; // Admin access only through server-side
    }

    // Reports collection - users can create reports
    match /reports/{reportId} {
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.reporterId;
      
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.reporterId;
    }

    // User blocks - users can manage their own blocks
    match /userBlocks/{blockId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == resource.data.blockerId ||
         request.auth.uid == request.resource.data.blockerId);
    }

    // Premium transactions - users can read their own transactions
    match /premiumTransactions/{transactionId} {
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
    }

    // Coin transactions - users can read their own coin history
    match /coinTransactions/{transactionId} {
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
    }

    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Firebase Storage Rules
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Connection test path - allow authenticated users to test connectivity
    match /connection-test/{allPaths=**} {
      allow read, write, delete: if request.auth != null;
    }

    // Profile images - authenticated users can read/write their own
    match /profile-images/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId
        && resource.size < 5 * 1024 * 1024; // 5MB limit
    }

    // Chat photos - authenticated users can read/write
    match /chat-photos/{chatId}/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
        && resource.size < 10 * 1024 * 1024; // 10MB limit
    }

    // Temporary photos - auto-delete after 24 hours
    match /temp-photos/{sessionId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
        && resource.size < 10 * 1024 * 1024; // 10MB limit
    }

    // Public avatars - anyone can read, authenticated users can write
    match /avatars/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null
        && resource.size < 2 * 1024 * 1024; // 2MB limit
    }
  }
}
